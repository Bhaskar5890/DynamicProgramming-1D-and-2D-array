public class Solution {
    public int LastStoneWeightII(int[] stones) 
    {
      int sum = 0;
      for (int i = 0; i < stones.Length; i++)
      {
        sum += stones[i];
      }
      var list = new List<int>();
      var arr = SubsetSum(stones, sum, stones.Length);
      for (int i = 0; i <= arr[0].Length / 2; i++)
      {
        if (arr[arr.Length - 1][i])
        {
          list.Add(i);
        }
      }

      var res = Int32.MaxValue;
      for (int i = 0; i < list.Count; i++)
      {
        res = Math.Min(res, Math.Abs(sum - 2 * list[i]));
      }

      return res;    
    }
    
    public bool[][] SubsetSum(int[] nums, int sum, int n)
    {
      var arr = new bool[nums.Length + 1][];
      for (int i = 0; i < arr.Length; i++)
      {
        arr[i] = new bool[sum + 1];
      }
      for (int i = 0; i < n + 1; i++)
      {
        for (int j = 0; j < sum + 1; j++)
        {
          if (i == 0)
          {
            arr[i][j] = false;
          }
          if (j == 0)
          {
            arr[i][j] = true;
          }
        }
      }

      for (int i = 1; i < n + 1; i++)
      {
        for (int j = 1; j < sum + 1; j++)
        {
          if (nums[i - 1] <= j)
          {
            arr[i][j] = arr[i - 1][j - nums[i - 1]] || arr[i - 1][j];
          }
          else
          {
            arr[i][j] = arr[i - 1][j];
          }
        }
      }
      return arr;
    }
}